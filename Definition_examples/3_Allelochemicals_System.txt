//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//														//
//		Written by: Vicente José Bevia Escrig			//
//		Mathematics Ph.D. student (2020-2024) at:		//
//		Instituto de Matemática Multidisciplinar,		//
//		Universitat Politècnica de València, Spain		//
//														//
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

#ifndef __CASE_DEFINITION_CUH__
#define __CASE_DEFINITION_CUH__

// -------------------------------------------------------------------------------- //
//  HERE ARE THE DEFINITIONS THAT CAN BE CHANGED ACCORDING TO THE PROBLEM TO STUDY  //
// -------------------------------------------------------------------------------- //

// -----------------------------------------------------------------------//
// -------------------- MODIFY!!! ----------------------------------------//
// -----------------------------------------------------------------------//
// Name of the case being simulated
#define CASE "Allelochemicals' system"

// Choosing whether showing full or simplified timing information
#define OUTPUT_INFO true

#define TYPE float

// AMR tolerance, Conjugate Gradient tolerance and number of discretization size for the radius of the RBFs
#define TOLERANCE_AMR       0.000035
#define TOLERANCE_ConjGrad  powf(10,-7)
#define DISC_RADIUS         3.75

#define Time_0 0

// State variables information
#define DIMENSIONS  2
#define DOMAIN_INF  {0, 0}
#define DOMAIN_SUP {3.5, 3.5}

static const char   IC_NAMES[DIMENSIONS] = { 'N','N' };
static const bool   IC_TRUNC[DIMENSIONS] = { false, false };
static const TYPE   IC_InfTVAL[DIMENSIONS] = { 0, 0 };
static const TYPE   IC_SupTVAL[DIMENSIONS] = { 3.5, 3.5 };
static const TYPE	IC_MEAN[DIMENSIONS] = {2.2793, 0.0};
static const TYPE	IC_STD [DIMENSIONS] = {sqrtf(0.0130f),sqrtf(0.00001f)};


// Vector field definition
// explanation: p0 = k1, p1 = k2, p3 = g0
#define VEC_FIELD {-parameter.sample_vec[0] * X.dim[0] + (mode % 2 != 0)*(parameter.sample_vec[2]), parameter.sample_vec[0] * X.dim[0] - parameter.sample_vec[1] * X.dim[1]}
// #define VEC_FIELD {-parameter.sample_vec[0] * X.dim[0] + (mode % 2 != 0)*( parameter.sample_vec[2]*expf( -powf((t - extra_param[mode]+extra_param[1] - extra_param[0])/(extra_param[1] - extra_param[0]),2) ) ), parameter.sample_vec[0] * X.dim[0] - parameter.sample_vec[1] * X.dim[1]}

// REMEMBER: IF THIS IS NOT ACTIVATED...REMEMBER TO ACTIVATE THE EXTRA PARAMETERS PART
#define DIVERGENCE -parameter.sample_vec[0] - parameter.sample_vec[1]


// Parameter information
#define PARAM_DIMENSIONS 3
inline const char  	_DIST_NAMES  [PARAM_DIMENSIONS]	= {'U','U','U'};
inline const bool  	_DIST_TRUNC  [PARAM_DIMENSIONS]	= {false,false,false};
inline const TYPE 	_DIST_InfTVAL[PARAM_DIMENSIONS] = {0.0f, 0.0f,0.0f};
inline const TYPE 	_DIST_SupTVAL[PARAM_DIMENSIONS] = {1.5f, 1.5f, 1.5f};
inline TYPE 		_DIST_MEAN	 [PARAM_DIMENSIONS]	= {0.6734, 0.6755, 6.5325};
inline TYPE 		_DIST_STD	 [PARAM_DIMENSIONS]	= {sqrtf(0.00092928f), sqrtf(0.0011f), sqrtf(0.1067f)};

#define IMPULSE_TYPE 2
#define INCLUDE_XTRA_PARAMS false

#if IMPULSE_TYPE == 2	
	#define SQUARE_JUMPS 3
	inline double SQ_JUMP_DIST_TIME [2 * SQUARE_JUMPS] = {0, 0.06, 2.5, 2.55, 4.98, 5.04};
	
	#if INCLUDE_XTRA_PARAMS
		#define XTRA_PARAM SQ_JUMP_DIST_TIME
		#define XTRA_PARAM_LENGTH SQUARE_JUMPS*2
	#endif
#endif



// This variable controls the size of the '.csv' files where the simulations are saved
// #define MAX_FILE_SIZE_B 1024*1024*1024

// Choosing whether showing full or simplified timing information
// #define OUTPUT_INFO true

// #define TYPE float

// AMR tolerance, Conjugate Gradient tolerance and number of discretization size for the radius of the RBFs
// #define TOLERANCE_AMR       0.00035
// #define TOLERANCE_ConjGrad  powf(10,-7)
// #define DISC_RADIUS         4.75

// State variables information
// #define DIMENSIONS  2
// #define DOMAIN_CTR  {0.25, 0.25}
// #define DOMAIN_DIAM {0.5, 0.5}
// inline const TYPE	IC_MEAN[DIMENSIONS] = {0.3, 0.0};
// inline const TYPE	IC_STD [DIMENSIONS] = {sqrtf(0.000025f),sqrtf(0.000001f)};

// Vector field definition
// // explanation: p0 = k1, p1 = k2, p3 = g0
// // #define VEC_FIELD {-parameter.sample_vec[0] * X.dim[0] + (mode % 2 != 0)*(parameter.sample_vec[2]), parameter.sample_vec[0] * X.dim[0] - parameter.sample_vec[1] * X.dim[1]}
// #define VEC_FIELD {-parameter.sample_vec[0] * X.dim[0] + (mode % 2 != 0)*( parameter.sample_vec[2]*expf( -powf((t - extra_param[mode]+extra_param[1] - extra_param[0])/(extra_param[1] - extra_param[0]),2) ) ), parameter.sample_vec[0] * X.dim[0] - parameter.sample_vec[1] * X.dim[1]}

// // REMEMBER: IF THIS IS NOT ACTIVATED...REMEMBER TO ACTIVATE THE EXTRA PARAMETERS PART
// #define DIVERGENCE -parameter.sample_vec[0] - parameter.sample_vec[1]

// Parameter information
// #define PARAM_DIMENSIONS 3
// inline const char  	_DIST_NAMES  [PARAM_DIMENSIONS]	= {'U','U','U'};
// inline const bool  	_DIST_TRUNC  [PARAM_DIMENSIONS]	= {false,false,false};
// inline const TYPE 	_DIST_InfTVAL[PARAM_DIMENSIONS] = {0.0f, 0.0f,0.0f};
// inline const TYPE 	_DIST_SupTVAL[PARAM_DIMENSIONS] = {1.5f, 1.5f, 1.5f};
// inline TYPE 		_DIST_MEAN	 [PARAM_DIMENSIONS]	= {0.05, 0.2, 0.02};
// inline TYPE 		_DIST_STD	 [PARAM_DIMENSIONS]	= {sqrtf(0.002f), sqrtf(0.002f), sqrtf(0.001f)};

// #define IMPULSE_TYPE 2
// #define INCLUDE_XTRA_PARAMS true

// #if IMPULSE_TYPE == 2	
// 	#define SQUARE_JUMPS 4
// 	inline double SQ_JUMP_DIST_TIME [2 * SQUARE_JUMPS] = {6, 12, 30, 36, 54, 60, 78, 84};
	
// 	#if INCLUDE_XTRA_PARAMS
// 		#define XTRA_PARAM 			SQ_JUMP_DIST_TIME
// 		#define XTRA_PARAM_LENGTH 	SQUARE_JUMPS*2
// 	#endif
// #endif
// // -----------------------------------------------------------------------//
// // -----------------------------------------------------------------------//
// // -----------------------------------------------------------------------//


#endif
